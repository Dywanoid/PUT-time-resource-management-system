scalar DateTime

schema {
    query: Query
    mutation: Mutation
}

type Client {
    id: ID!
    name: String!
    taxId: String
    streetWithNumber: String
    zipCode: String
    city: String
    archived: Boolean!
    createdAt: DateTime!
    projects(includeArchived: Boolean = false): [Project!]
}

type Project {
    id: ID!
    name: String!
    createdAt: DateTime!
    tasks(includeArchived: Boolean = false): [Task!]
    archived: Boolean!
}

type Task {
    id: ID!,
    name: String,
    createdAt: DateTime!
    archived: Boolean!
}

type Team {
    id: ID!
    name: String!
    description: String
    archived: Boolean!
    createdAt: DateTime!
}

type Query {
    clients(includeArchived: Boolean = false, offset: Int = 0, limit: Int = 10): [Client!]
    client(id: ID!): Client!
    project(id: ID!): Project!
    task(id: ID!): Task!
    teams(includeArchived: Boolean = false, offset: Int = 0, limit: Int = 25): [Team!]
    team(id: ID!): Team!
}

input CreateClientInput {
    name: String!
    taxId: String
    streetWithNumber: String
    zipCode: String
    city: String
}

input UpdateClientInput {
    clientId: ID!
    name: String!
    taxId: String
    streetWithNumber: String
    zipCode: String
    city: String
}

input ArchiveClientInput {
    clientId: ID!
}

input UnarchiveClientInput {
    clientId: ID!
}

input AddProjectInput {
    clientId: ID!
    name: String!
}

input UpdateProjectInput {
    projectId: ID!
    name: String!
}

input ArchiveProjectInput {
    projectId: ID!
}

input UnarchiveProjectInput {
    projectId: ID!
}

input AddTaskInput {
    projectId: ID!
    name: String!
}

input ArchiveTaskInput {
    taskId: ID!
}

input UnarchiveTaskInput {
    taskId: ID!
}

input UpdateTaskInput {
    taskId: ID!
    name: String!
}

input CreateTeamInput {
    name: String!
    description: String
}

input UpdateTeamInput {
    teamId: ID!
    name: String!
    description: String
}

input ArchiveTeamInput {
    teamId: ID!
}

input UnarchiveTeamInput {
    teamId: ID!
}

type Mutation {
    createClient(input: CreateClientInput!): Client!
    archiveClient(input: ArchiveClientInput!): Client!
    unarchiveClient(input: UnarchiveClientInput!): Client!
    updateClient(input: UpdateClientInput!): Client!
    addProject(input: AddProjectInput!): Project!
    updateProject(input: UpdateProjectInput!): Project!
    archiveProject(input: ArchiveProjectInput!): Project!
    unarchiveProject(input: UnarchiveProjectInput!): Project!
    addTask(input: AddTaskInput!): Task!
    updateTask(input: UpdateTaskInput!): Task!
    archiveTask(input: ArchiveTaskInput!): Task!
    unarchiveTask(input: UnarchiveTaskInput!): Task!
    createTeam(input: CreateTeamInput!): Team!
    updateTeam(input: UpdateTeamInput!): Team!
    archiveTeam(input: ArchiveTeamInput!): Team!
    unarchiveTeam(input: UnarchiveTeamInput!): Team!
}
