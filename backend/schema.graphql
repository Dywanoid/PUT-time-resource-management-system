scalar DateTime
scalar Date
scalar Interval # minutes

enum Currency {
    EUR
    USD
    PLN
}

# Indicates that if value is not specified, it's treated as min or max
directive @defaultmax on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION
directive @defaultmin on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

schema {
    query: Query
    mutation: Mutation
}

type Client {
    id: ID!
    name: String!
    taxId: String
    streetWithNumber: String
    zipCode: String
    city: String
    archived: Boolean!
    currency: Currency!
    createdAt: DateTime!
    projects(includeArchived: Boolean = false): [Project!]
}

type Project {
    id: ID!
    name: String!
    createdAt: DateTime!
    tasks(includeArchived: Boolean = false): [Task!]
    archived: Boolean!
    client: Client!
    assignments: [ProjectAssignment!]
}

type Task {
    id: ID!,
    project: Project!
    name: String!,
    createdAt: DateTime!
    archived: Boolean!
}

type Team {
    id: ID!
    name: String!
    description: String
    archived: Boolean!
    createdAt: DateTime!
    members: [User!]
}

type User {
    id: ID!
    name: String!
    roles: [String!]
    teams: [Team!]
}

type TeamMember {
    userId: ID!
    teamId: ID!
    createdAt: DateTime!
}

type ProjectAssignment {
    id: ID!
    project: Project!
    user: User!
    beginDate: Date @defaultmin
    endDate: Date @defaultmax
    hourlyRate: Float!
    createdAt: DateTime!
    timeLogs(fromDate: Date @defaultmin, toDate: Date @defaultmax): [TimeLog!]
    timeLogInfo: TimeLogInfo
}

type TimeLog {
    projectAssignment: ProjectAssignment!
    task: Task!
    date: Date!
    duration: Interval!
    createdAt: DateTime!
}

type TimeLogInfo {
    earliestDate: Date
    latestDate: Date
    totalCount: Int
}

type Report {
    fromDate: Date!
    toDate: Date!
    clientReports: [ClientReport!]
}

type ClientReport {
    client: Client!
    projectReports: [ProjectReport!]
    summary: ReportSummary!
    invoiceUrl: String!
}

type ProjectReport {
    project: Project!
    taskReports: [TaskReport!]
    summary: ReportSummary!
}

type TaskReport {
    task: Task!
    summary: ReportSummary!
}

type ReportSummary {
    totalCost: Float!
    timeLogCosts: [TimeLogCost!]
}

type TimeLogCost {
    user: User!
    duration: Interval!
    hourlyRate: Float!
    cost: Float!
}

type Query {
    clients(includeArchived: Boolean = false, offset: Int = 0, limit: Int = 10): [Client!]
    client(id: ID!): Client!
    project(id: ID!): Project!
    task(id: ID!): Task!
    teams(includeArchived: Boolean = false, offset: Int = 0, limit: Int = 25): [Team!]
    team(id: ID!): Team!
    users(offset: Int = 0, limit: Int = 10): [User!]
    user(id: ID): User!
    teamMembers(teamId: ID!): [TeamMember!] @deprecated(reason: "use team(id) { members { ... } }")
    userTeams(userId: ID!): [TeamMember!] @deprecated(reason: "use user(id) { teams { ... } }")
    projectAssignments(
        userId: ID, 
        projectId: ID, 
        fromDate: Date @defaultmin,
        toDate: Date @defaultmax,
        offset: Int = 0, 
        limit: Int = 10
        ): [ProjectAssignment!]
    report(
        projectIds: [ID!]
        fromDate: Date!,
        toDate: Date!
    ): Report!
}

input CreateClientInput {
    name: String!
    taxId: String
    streetWithNumber: String
    zipCode: String
    city: String
    currency: Currency! = EUR
}

input UpdateClientInput {
    clientId: ID!
    name: String!
    taxId: String
    streetWithNumber: String
    zipCode: String
    city: String
    currency: Currency! = EUR
}

input ArchiveClientInput {
    clientId: ID!
}

input UnarchiveClientInput {
    clientId: ID!
}

input AddProjectInput {
    clientId: ID!
    name: String!
}

input UpdateProjectInput {
    projectId: ID!
    name: String!
}

input ArchiveProjectInput {
    projectId: ID!
}

input UnarchiveProjectInput {
    projectId: ID!
}

input AddTaskInput {
    projectId: ID!
    name: String!
}

input ArchiveTaskInput {
    taskId: ID!
}

input UnarchiveTaskInput {
    taskId: ID!
}

input UpdateTaskInput {
    taskId: ID!
    name: String!
}

input CreateTeamInput {
    name: String!
    description: String
}

input UpdateTeamInput {
    teamId: ID!
    name: String!
    description: String
}

input ArchiveTeamInput {
    teamId: ID!
}

input UnarchiveTeamInput {
    teamId: ID!
}

input CreateTeamMemberInput {
    userId: ID!
    teamId: ID!
}

input DeleteTeamMemberInput {
    userId: ID!
    teamId: ID!
}

input DeleteTeamMemberBatchInput {
    userIdList: [ID!]
    teamId: ID!
}

input CreateTeamMemberBatchInput {
    userIdList: [ID!]
    teamId: ID!
}

input CreateProjectAssignmentInput {
    userId: ID!
    projectId: ID!
    beginDate: Date @defaultmin
    endDate: Date @defaultmax
    hourlyRate: Float!
}

input UpdateProjectAssignmentInput {
    projectAssignmentId: ID!
    beginDate: Date @defaultmin
    endDate: Date @defaultmax
    hourlyRate: Float!
}

input DeleteProjectAssignmentInput {
    projectAssignmentId: ID!
}

input CreateUpdateOrDeleteTimeLogInput {
    projectAssignmentId: ID!
    taskId: ID!
    date: Date!
    duration: Interval!
}

input DeleteTimeLogInput {
    projectAssignmentId: ID!
    taskId: ID!
    date: Date!
}

type Mutation {
    createClient(input: CreateClientInput!): Client!
    archiveClient(input: ArchiveClientInput!): Client!
    unarchiveClient(input: UnarchiveClientInput!): Client!
    updateClient(input: UpdateClientInput!): Client!
    addProject(input: AddProjectInput!): Project!
    updateProject(input: UpdateProjectInput!): Project!
    archiveProject(input: ArchiveProjectInput!): Project!
    unarchiveProject(input: UnarchiveProjectInput!): Project!
    addTask(input: AddTaskInput!): Task!
    updateTask(input: UpdateTaskInput!): Task!
    archiveTask(input: ArchiveTaskInput!): Task!
    unarchiveTask(input: UnarchiveTaskInput!): Task!
    createTeam(input: CreateTeamInput!): Team!
    updateTeam(input: UpdateTeamInput!): Team!
    archiveTeam(input: ArchiveTeamInput!): Team!
    unarchiveTeam(input: UnarchiveTeamInput!): Team!
    createTeamMember(input: CreateTeamMemberInput!): TeamMember!
    deleteTeamMember(input: DeleteTeamMemberInput!): TeamMember!
    deleteTeamMemberBatch(input: DeleteTeamMemberBatchInput!): [TeamMember!]
    createTeamMemberBatch(input: DeleteTeamMemberBatchInput!): [TeamMember!]
    createProjectAssignment(input: CreateProjectAssignmentInput!): ProjectAssignment!
    updateProjectAssignment(input: UpdateProjectAssignmentInput!): ProjectAssignment!
    deleteProjectAssignment(input: DeleteProjectAssignmentInput!): ProjectAssignment!
    createUpdateOrDeleteTimeLog(input: CreateUpdateOrDeleteTimeLogInput!): TimeLog!
    # TODO split this file into multiple files
}
